#pragma once
/*
Здесь будет модуль заложён, который будет описывать двигатель
FM = Fast Model
*/

#include "field.h"
#include "data.h"
#include "state.h"

           
// ================================================================


// ================================================================

class FMEngine
{
protected:
   // переменные, характеризующие состояние двигателя
   // Пока просто в виде чисел, а те, что рассчитываются, остаются в виде
   // функций расчёта. Если это будет слишком затратно, а значения будут использоваться
   // по многу раз, можно бужет сделать значения кэшированными
   //
   // Возможно, стоит использовать передачу значений через параметры. В возможно и нет.
   // Сейчас все зависимости будут представлены вызовами других функций из этого класса
   // При желании, можно также будет часть функций вынести в более общий класс модели двигателя
   FMEngState* state; // текущее "состояние" расчёта
   FMEngData*  data;

   // определения функций для вычисления остальных значений
   // новые значения переменных, участвующих в дифурах
   // UPD: новые значения рассчитываются в общем цикле Рунге-Кутты,
   // отдельно рассчитываются правые части уравнений в зависимости от времени
   // и дифференцируемых параметров
   // IN : nTime, nState - значения на данном - промежуточном! - шаге
   double prav_WD(FMEngState* s, FMEngData* d);
   double prav_WT(FMEngState* s, FMEngData* d);
   double prav_PK(FMEngState* s, FMEngData* d);
   double prav_PG(FMEngState* s, FMEngData* d);

public:
   FMEngine();
   ~FMEngine();
   void nextStep();  // процедура, "переводящая" модель на следующий шаг расчёта

   double getTime() {return this->state->time;}
   FMEngState* getState() {return this->state;}
   FMEngData* getData() {return this->data;}
};